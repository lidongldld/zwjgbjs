{"posts":[{"title":"java Consumer","text":"使用Lambda表达式创建Consumer例1 基础类型操作 123456789101112131415161718192021222324252627282930313233import java.util.ArrayList;import java.util.List;import java.util.function.Consumer; public class ConsumerLambda1 { public static void main(String[] args) { List&lt;Integer&gt; oddList = new ArrayList&lt;&gt;(); List&lt;Integer&gt; evenList = new ArrayList&lt;&gt;(); Consumer&lt;Integer&gt; storeNumber = n -&gt; { if (n % 2 == 0) { evenList.add(n); } else { oddList.add(n); } }; Consumer&lt;List&lt;Integer&gt;&gt; printList = list -&gt; list.forEach(n -&gt; System.out.println(n)); storeNumber.accept(10); storeNumber.accept(15); storeNumber.accept(25); storeNumber.accept(30); System.out.println(&quot;--- Odd number ---&quot;); printList.accept(oddList); System.out.println(&quot;--- Even number ---&quot;); printList.accept(evenList); }} 输出结果 123456--- Odd number ---1525--- Even number ---1030 例2 对象类型操作 1234567891011121314151617181920212223242526272829303132333435import java.util.function.Consumer; public class ConsumerLambda2 { public static void main(String[] args) { Consumer&lt;Citizen&gt; electionConsumer = c -&gt; { if (c.getAge() &lt; 18) { System.out.println(c.getName() + &quot; is not eligible to vote.&quot;); } else { System.out.println(c.getName() + &quot; can vote.&quot;); } }; electionConsumer.accept(new Citizen(&quot;Ritesh&quot;, 15)); electionConsumer.accept(new Citizen(&quot;Shreya&quot;, 20)); }} class Citizen { private String name; private int age; public Citizen(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public int getAge() { return age; }} 输出结果 12Ritesh is not eligible to vote.Shreya can vote. 使用方法引用创建Consumer示例： 12345678910111213141516171819202122232425262728293031import java.util.HashMap;import java.util.Map;import java.util.function.Consumer; public class ConsumerMethodRef { public static void main(String[] args) { Map&lt;Integer, String&gt; persons = new HashMap&lt;Integer, String&gt;(); persons.put(101, &quot;Mahesh&quot;); persons.put(102, &quot;Krishna&quot;); Consumer&lt;Map&lt;Integer, String&gt;&gt; updatePersons = Utility::updateData; Consumer&lt;Map&lt;Integer, String&gt;&gt; displayPersons = Utility::displayData; updatePersons.accept(persons); displayPersons.accept(persons); }} class Utility { static void updateData(Map&lt;Integer, String&gt; persons) { persons.replaceAll((k, v) -&gt; &quot;Shree &quot;.concat(v)); } static void displayData(Map&lt;Integer, String&gt; persons) { for (Map.Entry&lt;Integer, String&gt; entry : persons.entrySet()) { System.out.println(entry.getKey() + &quot; - &quot; + entry.getValue()); } }} 输出结果 12101 - Shree Mahesh102 - Shree Krishna","link":"/zwjgbjs/zwjgbjs/"},{"title":"java Preconditions","text":"源码分析： 12345678910111213141516171819202122//检查参数（expression）是否合法，若为false，抛出IllegalArgumentException异常public static void checkArgument(boolean expression) { if (!expression) { throw new IllegalArgumentException(); }}//检查入参，带异常信息public static void checkArgument(boolean expression, @Nullable Object errorMessage) { if (!expression) { throw new IllegalArgumentException(String.valueOf(errorMessage)); }}//检查入参，errorMessageTemplate表示异常信息模板，errorMessageArgs将被替换为信息模板中的参数public static void checkArgument( boolean expression, @Nullable String errorMessageTemplate, @Nullable Object... errorMessageArgs) { if (!expression) { throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs)); }} 示例1： 1Preconditions.checkArgument(demo,&quot;demo不能为false&quot;); 输出： 123Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: demo不能为false at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122) at demo.PreconditionsDemo.main(PreconditionsDemo.java:8) 示例2： 1Preconditions.checkArgument(demo,&quot;该参数为%s&quot;,demo); 输出： 123Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: 该参数为false at com.google.common.base.Preconditions.checkArgument(Preconditions.java:191) at demo.PreconditionsDemo.main(PreconditionsDemo.java:8)","link":"/zwjgbjs/zwjgbjs/"},{"title":"java optional","text":"Optional 类提供了一种优雅的方式来处理可能为空的值。可以减少if else 的使用 123456789class PriceNullException extends RuntimeException{ public PriceNullException(String message){ super(message); }}Double price = null;Double finalPrice = Optional.ofNullable(price) .orElseThrow(()-&gt;new PriceNullException(&quot;价格为空&quot;)); 上述代码中，如果 price 为空，则会抛出自定义的 PriceNullException 异常。 判断 Optional 是否存在值、获取 Optional 的值可以通过调用 Optional 对象的 get() 方法来获取其值。但是在调用 get() 方法之前，最好先通过 isPresent() 方法来判断 Optional 是否存在值。因为如果 Optional 为空，调用 get() 方法会抛出 NoSuchElementException 异常。 123456if (optionalName.isPresent()) { System.out.println(&quot;姓名为：&quot; + optionalName.get());} else { System.out.println(&quot;姓名为空&quot;);}","link":"/zwjgbjs/zwjgbjs/"},{"title":"git 使用问题收集","text":"1、github 网络连接不上使用 watt toolkit 加速器即可解决。 2、使用了watt toolkit加速器 push总会失败。报错内容如下：1fatal: unable to access 'https://github.com/xxxxx/xxxxxxx.git/': SSL certificate problem: unable to get local issuer certificate 解决办法：自签名SSL证书或内部测试证书，可以使用git config命令禁用SSL验证，但这会降低安全性： 1git config --global http.sslVerify false","link":"/zwjgbjs/zwjgbjs/"},{"title":"hexo 配置学习","text":"学习配置文档：https://xiamu-ssr.github.io/Hexo/2024/06/19/2024-06-19-12-31-52/学习视频：https://www.bilibili.com/video/BV1xTgTemEDU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0e3ef2750148c322d0673ff338633934 hexo 语法1234567# 创建草稿 hexo new draft aaa #其中【aaa】就是草稿名# Hexo提供了一个预览的方法hexo s --draft# 正式发布博文hexo p aaa# 该命令的原理也不过是将文章从/source/_drafts移动到/source/_posts而已，若日后想将正式文章转为为草稿，只需手动将文章从/source/_posts目录移动到/source/_drafts目录即可","link":"/zwjgbjs/zwjgbjs/"},{"title":"搜索方法","text":"双引号搜索在想要搜索的关键字上加双引号，可对关键字进行精确搜索，剔除读音相近的模拟算法搜索结果。 括号搜索给关键词加上括号，那么搜索引擎将会把括号内默认为一个关键词进行搜索。 加号搜索在想要搜索的关键词前使用加号，也就等于告诉搜索引擎你搜索的这个词必须出现在搜索结果的网页中。 减号搜索想要搜索的关键词前使用减号，实质是与上面有些相反的意思，则在搜索结果中不能出现前面带减号的关键词。（注意：减号前加空格，减号后面不需要空格） 限定字符搜索 intitle在想要搜索标题关键词前加上intitle：，意味着返回页面标题中包含有指定关键词的页面。例如：2015年 intitle:省域经济综合竞争力 关键词“省域经济综合竞争力”一定会包含在搜索结果的标题中，而intitle之前的“2015年”则可能在标题中，也可能在正文中出现。 限定域名搜索把搜索范围限定在特定站点中，如site：www.winwin7.com。“site:”后面跟的站点域名，不要带“http://”；site:后面带不带www结果可能是不一样的，因为有些域名还包括二级域名，如：site:www.某某.com和site:某某.com,搜索结果就不一样；另外，site:和站点名之间，不要带空格。 限定url搜索inurl的作用是限定在url中搜索。任何网站的url都不是随意设置的，都经过一番过虑，有一定用意的。很多地方，url链接和网页的内容有着密切的相关。所以，可以利用这种相关性，来缩小范围，快速准确地找到所需信息。 博客限定搜索使用blog：命令可以搜索所有博客中你所感兴趣的内容。 限定文档类型搜索格式为：filetype:（文件后缀名）关键字。该语法可以限定查询词出现在指定的文档中，支持文档格式有pdf，doc，xls，ppt，rtf，all（所有上面的文档格式）。可以用于查找特定类型的文件，对于找文档资料相当有帮助。","link":"/zwjgbjs/zwjgbjs/"}],"tags":[{"name":"java","slug":"java","link":"/zwjgbjs/tags/java/"},{"name":"git","slug":"git","link":"/zwjgbjs/tags/git/"},{"name":"hexo","slug":"hexo","link":"/zwjgbjs/tags/hexo/"}],"categories":[],"pages":[{"title":"软件使用","text":"","link":"/zwjgbjs/software/index.html"}]}